{"version":3,"sources":["app.ts"],"names":[],"mappings":"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","file":"app.js","sourcesContent":["namespace Framework {\r\n    export module Connection {\r\n        export class FrameworkSocketNamespaces {\r\n            public static SEARCH: string = \"/searching\";\r\n            public static PLAY: string = \"/play\";\r\n        }\r\n\r\n        export class FrameworkSocketEvents {\r\n\r\n            public static newConnection: string = \"FrameworkSocketEvents\" + \"newConnection\";\r\n            public static letsConnect: string = \"FrameworkSocketEvents\" + \"letsConnect\";\r\n            public static joinRoom: string = \"FrameworkSocketEvents\" + \"joinRoom\";\r\n            public static joinedRoom: string = \"FrameworkSocketEvents\" + \"joinedRoom\";\r\n            public static privateMessage: string = \"FrameworkSocketEvents\" + \"privateMessage\";\r\n            // public static partnerFoundChannel: string = \"partnerFoundChannel\";\r\n        }\r\n\r\n        export class FrameworkSocketMessages {\r\n            public static WHO_WANTS_TO_PLAY: string = \"FrameworkSocketMessages.\" + \"WHO_WANTS_TO_PLAY\";\r\n            public static I_WANT_TO_PLAY: string = \"FrameworkSocketMessages.\" + \"I_WANTS_TO_PLAY\";\r\n            public static HELLO: string = \"FrameworkSocketMessages.\" + \"HELLO\";\r\n\r\n        }\r\n    }\r\n}\n///@ts-ignore\r\nimport nodeStatic    = require( 'node-static' );\r\n//@ts-ignore\r\nimport http            = require( \"http\" );\r\n//@ts-ignore\r\nimport socketIO        = require( 'socket.io' );\r\n//@ts-ignore\r\nimport express        = require( 'express' );\r\n\r\nexport module PockeyServer {\r\n\r\n    //@ts-ignore\r\n    import FrameworkSocketNamespaces = Framework.Connection.FrameworkSocketNamespaces;\r\n    //@ts-ignore\r\n    import FrameworkSocketMessages = Framework.Connection.FrameworkSocketMessages;\r\n    //@ts-ignore\r\n    import FrameworkSocketEvents = Framework.Connection.FrameworkSocketEvents;\r\n\r\n    export class Server {\r\n        protected file;\r\n        protected httpServer;\r\n        protected socketIo;\r\n        protected socketIsFree: boolean = true;\r\n\r\n        // protected lookingForPartner: boolean = true;\r\n\r\n        constructor() {\r\n            // let express = require('express');\r\n            const app = express();\r\n\r\n            /* // var app = new express();\r\n             // var http = http.Server(app);\r\n             // var app = require('express')();\r\n             const express = require('express')\r\n             const app = express()\r\n             const port = 4000\r\n\r\n             app.get('/', (req, res) => res.send('Hello World!'));\r\n             app.listen(port, () => console.log(`Example app listening on port ${port}!`))\r\n             // var http = new (require('http')).Server(app);\r\n\r\n             // app.get('/', function(req, res){\r\n             //     res.send('<h1>Hello world</h1>');\r\n             // });\r\n\r\n             // http.listen(4000, function(){\r\n             //     console.log('listening on *:3000');\r\n             // });*/\r\n//-------------------\r\n            this.file = new nodeStatic.Server('../out', { // bin is the folder containing our html, etc\r\n                cache: 0,\t// don't cache\r\n                gzip: true\t// gzip our assets\r\n            });\r\n\r\n            // create our server\r\n            this.httpServer = http.createServer((request, response) => {\r\n                request.addListener('end', () => {\r\n                    this.file.serve(request, response);\r\n                });\r\n                request.resume();\r\n            }).listen(4000);\r\n\r\n            this.socketIo = socketIO();\r\n            // console.log(\"socket id: \" + this.socketIo.id);\r\n            this.socketIo.serveClient(true); // the server will serve the client js file\r\n            this.socketIo.attach(this.httpServer);\r\n\r\n            let lookingForPartnerNamespace = this.socketIo.of(FrameworkSocketNamespaces.SEARCH);\r\n            lookingForPartnerNamespace.on('connection', function (socket) {\r\n                let id: string = socket.id.toString().replace(FrameworkSocketNamespaces.SEARCH, '');\r\n                console.log(FrameworkSocketNamespaces.SEARCH + ' -> someone connected: ' + id);\r\n\r\n                socket.on(FrameworkSocketEvents.letsConnect, (msg, id, partnerID) => {\r\n                    socket.broadcast.emit(FrameworkSocketEvents.letsConnect, msg, id, partnerID);\r\n                    // socket.emit(FrameworkSocketEvents.letsConnect, msg, id, partnerID);\r\n                    // console.log(\"partnerNamespaceID, socket: \" +partnerNamespaceID, socket);\r\n                });\r\n                // socket.emit(FrameworkSocketEvents.)\r\n            });\r\n\r\n            let playingNamespace = this.socketIo.of(FrameworkSocketNamespaces.PLAY);\r\n            playingNamespace.on('connection', function (socket) {\r\n                let id: string = socket.id.toString().replace(FrameworkSocketNamespaces.PLAY, '');\r\n                console.log(FrameworkSocketNamespaces.PLAY + ' -> someone connected: ' + id);\r\n\r\n                socket.on(FrameworkSocketEvents.joinRoom, (room) => {\r\n                    socket.join(room);\r\n                    // socket.broadcast.emit(FrameworkSocketEvents.joinRoom, room, id);\r\n                    socket.emit(FrameworkSocketEvents.joinedRoom, room);\r\n\r\n                    console.log(\"on join room. room name: \" + room);\r\n                });\r\n\r\n                // socket.on(FrameworkSocketEvents.joinRoom, (room, id) => {\r\n                //     socket.join(room);\r\n                //     // socket.broadcast.emit(FrameworkSocketEvents.joinRoom, room, id);\r\n                //     socket.emit(FrameworkSocketEvents.joinedRoom, room, id);\r\n                //\r\n                //     console.log(\"on join room. room name: \" + room);\r\n                // });\r\n\r\n                socket.on(FrameworkSocketEvents.privateMessage, (room, messageType, messageData) => {\r\n                    /*socket.join(room);\r\n                    // socket.broadcast.emit(FrameworkSocketEvents.joinRoom, room, id);*/\r\n                    socket.broadcast.to(room).emit(FrameworkSocketEvents.privateMessage, messageType, messageData);\r\n                    // console.log(\"private message sent: \" + messageType, messageData);\r\n\r\n                });\r\n                // socket.emit(FrameworkSocketEvents.)\r\n            });\r\n           //-------------------------------------------------\r\n\r\n            /*let sleepNamespace = socketIO()\r\n                .of(\"/\" + FrameworkSocketNamespaces.SEARCH)\r\n                .on(\"connection\", function (socket) {\r\n                    console.log(\"salam\");\r\n\r\n                  /!*  socket.on(FrameworkSocketEvents.onNewConnection, () => {\r\n\r\n                    })*!/\r\n                    // socket.emit('a message', {\r\n                    //     that: 'only'\r\n                    //     , '/chat': 'will get'\r\n                    // });\r\n                    // chat.emit('a message', {\r\n                    //     everyone: 'in'\r\n                    //     , '/chat': 'will get'\r\n                    // });\r\n                });*/\r\n\r\n            // this.socketIo = socketIO();\r\n            // this.socketIo.serveClient(true); // the server will serve the client js file\r\n            // this.socketIo.attach(this.httpServer);\r\n\r\n// listen for a connection\r\n            /* this.socketIo.on('connection', (socket) => {\r\n\r\n                 console.log('User ' + socket.id + ' connected');\r\n                /!* socket.emit(FrameworkSocketChannels.newConnectionChannel, socket.id);\r\n                 // socket.broadcast.emit(FrameworkSocketChannels.lookingForPartnerChannel, [\"New ID: \", socket.id]);\r\n\r\n                 socket.on(FrameworkSocketChannels.lookingForPartnerChannel, (id) => {\r\n                     console.log(FrameworkSocketChannels.lookingForPartnerChannel + \" -> \" + id);\r\n\r\n                     socket.broadcast.emit(FrameworkSocketChannels.lookingForPartnerChannel, id);\r\n                 });\r\n\r\n                 socket.on(FrameworkSocketChannels.letsConnectChannel, (id) => {\r\n                     console.log(FrameworkSocketChannels.letsConnectChannel + \" -> \" + id);\r\n\r\n                     socket.broadcast.emit(FrameworkSocketChannels.letsConnectChannel, id);\r\n                 });\r\n\r\n                 socket.on(FrameworkSocketChannels.partnerFoundChannel, (clientId, id, connectionID) => {\r\n                     console.log(FrameworkSocketChannels.partnerFoundChannel + \" -> \" + id);\r\n\r\n                     socket.broadcast.emit(FrameworkSocketChannels.partnerFoundChannel, clientId, id, connectionID);\r\n\r\n                     socket.on(connectionID, (message) =>\r\n                     {\r\n                         socket.broadcast.emit(connectionID, message);\r\n                         console.log(\"intra la custom\");\r\n\r\n                     });\r\n                 });*!/\r\n             });*/\r\n\r\n\r\n        }\r\n    }\r\n}\r\n\r\nnew PockeyServer.Server();\r\n// new Framework.EntryPoint.ConnectionModule;\r\n"]}